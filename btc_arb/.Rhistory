# 5) Plot rolling residual spread with dynamic thresholds & entries/exits
ggplot(aligned, aes(Date, resid_roll)) +
geom_line(color = "steelblue") +
geom_line(aes(y =  threshold_roll), linetype = "dashed", color = "grey50") +
geom_line(aes(y = -threshold_roll), linetype = "dashed", color = "grey50") +
geom_point(
data = filter(aligned, entry_roll),
aes(Date, resid_roll),
shape = 24, color = "darkgreen", fill = "green", size = 2
) +
geom_point(
data = filter(aligned, exit_roll),
aes(Date, resid_roll),
shape = 25, color = "darkred",   fill = "red",   size = 2
) +
labs(
title = sprintf("%d-Day Rolling Residual Spread\n(Entries = ▲ green, Exits = ▼ red)", window_size),
x     = "Date",
y     = "Residual Spread (USD)"
) +
theme_minimal()
# At the end, report your profit and % return
final_profit <- tail(aligned$cumPnL_roll, 1)
return_pct   <- final_profit / portfolio * 100
message(sprintf("Total Profit = $%.2f", final_profit))
message(sprintf("Portfolio Return = %.2f%%", return_pct))
# Remove any NA or first-zero rows from PnL
valid_pnl <- aligned$pnl_roll[aligned$pnl_roll != 0]
# 1. Mean daily PnL
mean_pnl <- mean(valid_pnl)
# 2. Daily standard deviation
sd_pnl <- sd(valid_pnl)
# 3. Daily Sharpe ratio (risk-free rate assumed = 0)
sharpe_daily <- mean_pnl / sd_pnl
# Optional: annualized Sharpe ratio (assuming 252 trading days)
sharpe_annual <- sharpe_daily * sqrt(252)
# Print results
message(sprintf("Mean Daily PnL     = $%.2f", mean_pnl))
message(sprintf("Daily SD of PnL    = $%.2f", sd_pnl))
message(sprintf("Daily Sharpe Ratio = %.4f", sharpe_daily))
message(sprintf("Annualized Sharpe  = %.4f", sharpe_annual))
window_size <- 30    # rolling look-back in days
z_thresh    <- 1   # entry/exit z-score threshold
portfolio <- 100000
# ================================
# Portfolio sizing
risk_fraction <- 0.1  # 10% of portfolio used per trade
position_size <- portfolio * risk_fraction
# Function to prepare data
prepare_data <- function(file_path) {
read.csv(file_path, stringsAsFactors = FALSE) %>%
mutate(
Date = as.Date(Date),
across(c(Open, High, Low, Close), ~ suppressWarnings(as.numeric(.)))
) %>%
filter(!is.na(Date), !is.na(Close))
}
# Load and prepare datasets
BTC_data <- prepare_data("BTC.csv")
SFTB_data  <- prepare_data("SFTB.csv")
# Merge into one data frame and initialize columns
aligned <- aligned %>%
mutate(
capital = portfolio + lag(cumPnL_roll, default = 0),  # this needs cumPnL_roll to exist
dynamic_position_size = capital * risk_fraction,
pnl_roll = ifelse(row_number() > 1,
dynamic_position_size * position_roll * (resid_roll - lag(resid_roll)),
0),
pnl_roll = ifelse(is.na(pnl_roll), 0, pnl_roll)
)
# Now calculate cumulative PnL *after* pnl_roll exists
aligned <- aligned %>%
mutate(
cumPnL_roll = cumsum(pnl_roll)
)
n <- nrow(aligned)
# 90-day rolling estimation and next-day signal
for (i in (window_size+1):(n-1)) {
calib <- aligned[(i-window_size):(i-1), ]
# 1) Fit hedge line on calibration window
mod <- lm(Close_SFTB ~ Close_BTC, data = calib)
a   <- coef(mod)[1]
b   <- coef(mod)[2]
aligned$alpha_roll[i] <- a
aligned$beta_roll[i]  <- b
# 2) Compute calibration residual stats
resid_calib <- calib$Close_SFTB - (a + b * calib$Close_BTC)
mu <- mean(resid_calib)
s  <- sd(resid_calib)
aligned$mu_roll[i]        <- mu
aligned$sd_roll[i]        <- s
aligned$threshold_roll[i] <- z_thresh * s
# 3) Today's residual & z-score
today_resid          <- aligned$Close_SFTB[i] - (a + b * aligned$Close_BTC[i])
aligned$resid_roll[i] <- today_resid
aligned$z_roll[i]     <- (today_resid - mu) / s
# 4) Generate today's signal (enter next day)
sig <- ifelse(aligned$z_roll[i] < -z_thresh,  1,
ifelse(aligned$z_roll[i] >  z_thresh, -1, 0))
aligned$signal_roll[i]     <- sig
aligned$position_roll[i+1] <- sig
}
# Compute PnL and cumulative PnL with corrected sign
aligned <- aligned %>%
mutate(
pnl_roll    = ifelse(row_number() > 1,
position_roll * (resid_roll - lag(resid_roll)),
0),
pnl_roll    = ifelse(is.na(pnl_roll), 0, pnl_roll),
cumPnL_roll = cumsum(pnl_roll)
) %>%
# Define entry/exit based on position changes
mutate(
prev_pos   = lag(position_roll, default = 0),
entry_roll = prev_pos == 0 & position_roll != 0,
exit_roll  = prev_pos != 0 & position_roll == 0
)
# 1) ADF test on rolling residuals
adf_roll <- adf.test(na.omit(aligned$resid_roll[(window_size+1):n]))
print(adf_roll)
# 2) One-sample t-test on rolling PnL (drop initial zeros)
pnl_test <- aligned$pnl_roll[(window_size+2):n]
tt_roll  <- t.test(pnl_test, mu = 0, alternative = "greater")
print(tt_roll)
# 3) Plot cumulative PnL
ggplot(aligned, aes(Date, cumPnL_roll)) +
geom_line(color = "darkorange", size = 1) +
labs(
title    = sprintf("Cumulative PnL: %d-Day Rolling Z-Score Strategy", window_size),
subtitle = sprintf("Threshold = ±%.2f σ", z_thresh),
x        = "Date",
y        = "Cumulative PnL (USD)"
) +
theme_minimal()
# 4) Plot SFTB vs. rolling hedge line with entry/exit markers
aligned <- aligned %>%
mutate(hedgeLine_roll = alpha_roll + beta_roll * Close_BTC)
ggplot(aligned, aes(x = Date)) +
geom_line(aes(y = Close_SFTB),      color = "blue",  size = 1) +
geom_line(aes(y = hedgeLine_roll), color = "red",   linetype = "dashed", size = 1) +
geom_point(
data = filter(aligned, entry_roll),
aes(x = Date, y = Close_SFTB),
shape = 24, color = "darkgreen", fill = "green", size = 2
) +  # ▲ entries
geom_point(
data = filter(aligned, exit_roll),
aes(x = Date, y = Close_SFTB),
shape = 25, color = "darkred",   fill = "red",   size = 2
) +  # ▼ exits
labs(
title    = sprintf("SFTB vs %d-Day Rolling Hedge Line", window_size),
subtitle = sprintf("Entries = ▲ green, Exits = ▼ red (Threshold ±%.2fσ)", z_thresh),
x        = "Date",
y        = "Price (USD)"
) +
theme_minimal()
# 5) Plot rolling residual spread with dynamic thresholds & entries/exits
ggplot(aligned, aes(Date, resid_roll)) +
geom_line(color = "steelblue") +
geom_line(aes(y =  threshold_roll), linetype = "dashed", color = "grey50") +
geom_line(aes(y = -threshold_roll), linetype = "dashed", color = "grey50") +
geom_point(
data = filter(aligned, entry_roll),
aes(Date, resid_roll),
shape = 24, color = "darkgreen", fill = "green", size = 2
) +
geom_point(
data = filter(aligned, exit_roll),
aes(Date, resid_roll),
shape = 25, color = "darkred",   fill = "red",   size = 2
) +
labs(
title = sprintf("%d-Day Rolling Residual Spread\n(Entries = ▲ green, Exits = ▼ red)", window_size),
x     = "Date",
y     = "Residual Spread (USD)"
) +
theme_minimal()
# At the end, report your profit and % return
final_profit <- tail(aligned$cumPnL_roll, 1)
return_pct   <- final_profit / portfolio * 100
message(sprintf("Total Profit = $%.2f", final_profit))
message(sprintf("Portfolio Return = %.2f%%", return_pct))
# Remove any NA or first-zero rows from PnL
valid_pnl <- aligned$pnl_roll[aligned$pnl_roll != 0]
# 1. Mean daily PnL
mean_pnl <- mean(valid_pnl)
# 2. Daily standard deviation
sd_pnl <- sd(valid_pnl)
# 3. Daily Sharpe ratio (risk-free rate assumed = 0)
sharpe_daily <- mean_pnl / sd_pnl
# Optional: annualized Sharpe ratio (assuming 252 trading days)
sharpe_annual <- sharpe_daily * sqrt(252)
# Print results
message(sprintf("Mean Daily PnL     = $%.2f", mean_pnl))
message(sprintf("Daily SD of PnL    = $%.2f", sd_pnl))
message(sprintf("Daily Sharpe Ratio = %.4f", sharpe_daily))
message(sprintf("Annualized Sharpe  = %.4f", sharpe_annual))
window_size <- 15    # rolling look-back in days
z_thresh    <- 1   # entry/exit z-score threshold
portfolio <- 100000
# ================================
# Portfolio sizing
risk_fraction <- 0.1  # 10% of portfolio used per trade
position_size <- portfolio * risk_fraction
# Function to prepare data
prepare_data <- function(file_path) {
read.csv(file_path, stringsAsFactors = FALSE) %>%
mutate(
Date = as.Date(Date),
across(c(Open, High, Low, Close), ~ suppressWarnings(as.numeric(.)))
) %>%
filter(!is.na(Date), !is.na(Close))
}
# Load and prepare datasets
BTC_data <- prepare_data("BTC.csv")
SFTB_data  <- prepare_data("SFTB.csv")
# Merge into one data frame and initialize columns
aligned <- aligned %>%
mutate(
capital = portfolio + lag(cumPnL_roll, default = 0),  # this needs cumPnL_roll to exist
dynamic_position_size = capital * risk_fraction,
pnl_roll = ifelse(row_number() > 1,
dynamic_position_size * position_roll * (resid_roll - lag(resid_roll)),
0),
pnl_roll = ifelse(is.na(pnl_roll), 0, pnl_roll)
)
# Now calculate cumulative PnL *after* pnl_roll exists
aligned <- aligned %>%
mutate(
cumPnL_roll = cumsum(pnl_roll)
)
n <- nrow(aligned)
# 90-day rolling estimation and next-day signal
for (i in (window_size+1):(n-1)) {
calib <- aligned[(i-window_size):(i-1), ]
# 1) Fit hedge line on calibration window
mod <- lm(Close_SFTB ~ Close_BTC, data = calib)
a   <- coef(mod)[1]
b   <- coef(mod)[2]
aligned$alpha_roll[i] <- a
aligned$beta_roll[i]  <- b
# 2) Compute calibration residual stats
resid_calib <- calib$Close_SFTB - (a + b * calib$Close_BTC)
mu <- mean(resid_calib)
s  <- sd(resid_calib)
aligned$mu_roll[i]        <- mu
aligned$sd_roll[i]        <- s
aligned$threshold_roll[i] <- z_thresh * s
# 3) Today's residual & z-score
today_resid          <- aligned$Close_SFTB[i] - (a + b * aligned$Close_BTC[i])
aligned$resid_roll[i] <- today_resid
aligned$z_roll[i]     <- (today_resid - mu) / s
# 4) Generate today's signal (enter next day)
sig <- ifelse(aligned$z_roll[i] < -z_thresh,  1,
ifelse(aligned$z_roll[i] >  z_thresh, -1, 0))
aligned$signal_roll[i]     <- sig
aligned$position_roll[i+1] <- sig
}
# Compute PnL and cumulative PnL with corrected sign
aligned <- aligned %>%
mutate(
pnl_roll    = ifelse(row_number() > 1,
position_roll * (resid_roll - lag(resid_roll)),
0),
pnl_roll    = ifelse(is.na(pnl_roll), 0, pnl_roll),
cumPnL_roll = cumsum(pnl_roll)
) %>%
# Define entry/exit based on position changes
mutate(
prev_pos   = lag(position_roll, default = 0),
entry_roll = prev_pos == 0 & position_roll != 0,
exit_roll  = prev_pos != 0 & position_roll == 0
)
# 1) ADF test on rolling residuals
adf_roll <- adf.test(na.omit(aligned$resid_roll[(window_size+1):n]))
print(adf_roll)
# 2) One-sample t-test on rolling PnL (drop initial zeros)
pnl_test <- aligned$pnl_roll[(window_size+2):n]
tt_roll  <- t.test(pnl_test, mu = 0, alternative = "greater")
print(tt_roll)
# 3) Plot cumulative PnL
ggplot(aligned, aes(Date, cumPnL_roll)) +
geom_line(color = "darkorange", size = 1) +
labs(
title    = sprintf("Cumulative PnL: %d-Day Rolling Z-Score Strategy", window_size),
subtitle = sprintf("Threshold = ±%.2f σ", z_thresh),
x        = "Date",
y        = "Cumulative PnL (USD)"
) +
theme_minimal()
# 4) Plot SFTB vs. rolling hedge line with entry/exit markers
aligned <- aligned %>%
mutate(hedgeLine_roll = alpha_roll + beta_roll * Close_BTC)
ggplot(aligned, aes(x = Date)) +
geom_line(aes(y = Close_SFTB),      color = "blue",  size = 1) +
geom_line(aes(y = hedgeLine_roll), color = "red",   linetype = "dashed", size = 1) +
geom_point(
data = filter(aligned, entry_roll),
aes(x = Date, y = Close_SFTB),
shape = 24, color = "darkgreen", fill = "green", size = 2
) +  # ▲ entries
geom_point(
data = filter(aligned, exit_roll),
aes(x = Date, y = Close_SFTB),
shape = 25, color = "darkred",   fill = "red",   size = 2
) +  # ▼ exits
labs(
title    = sprintf("SFTB vs %d-Day Rolling Hedge Line", window_size),
subtitle = sprintf("Entries = ▲ green, Exits = ▼ red (Threshold ±%.2fσ)", z_thresh),
x        = "Date",
y        = "Price (USD)"
) +
theme_minimal()
# 5) Plot rolling residual spread with dynamic thresholds & entries/exits
ggplot(aligned, aes(Date, resid_roll)) +
geom_line(color = "steelblue") +
geom_line(aes(y =  threshold_roll), linetype = "dashed", color = "grey50") +
geom_line(aes(y = -threshold_roll), linetype = "dashed", color = "grey50") +
geom_point(
data = filter(aligned, entry_roll),
aes(Date, resid_roll),
shape = 24, color = "darkgreen", fill = "green", size = 2
) +
geom_point(
data = filter(aligned, exit_roll),
aes(Date, resid_roll),
shape = 25, color = "darkred",   fill = "red",   size = 2
) +
labs(
title = sprintf("%d-Day Rolling Residual Spread\n(Entries = ▲ green, Exits = ▼ red)", window_size),
x     = "Date",
y     = "Residual Spread (USD)"
) +
theme_minimal()
# At the end, report your profit and % return
final_profit <- tail(aligned$cumPnL_roll, 1)
return_pct   <- final_profit / portfolio * 100
message(sprintf("Total Profit = $%.2f", final_profit))
message(sprintf("Portfolio Return = %.2f%%", return_pct))
# Remove any NA or first-zero rows from PnL
valid_pnl <- aligned$pnl_roll[aligned$pnl_roll != 0]
# 1. Mean daily PnL
mean_pnl <- mean(valid_pnl)
# 2. Daily standard deviation
sd_pnl <- sd(valid_pnl)
# 3. Daily Sharpe ratio (risk-free rate assumed = 0)
sharpe_daily <- mean_pnl / sd_pnl
# Optional: annualized Sharpe ratio (assuming 252 trading days)
sharpe_annual <- sharpe_daily * sqrt(252)
# Print results
message(sprintf("Mean Daily PnL     = $%.2f", mean_pnl))
message(sprintf("Daily SD of PnL    = $%.2f", sd_pnl))
message(sprintf("Daily Sharpe Ratio = %.4f", sharpe_daily))
message(sprintf("Annualized Sharpe  = %.4f", sharpe_annual))
window_size <- 7    # rolling look-back in days
z_thresh    <- 1   # entry/exit z-score threshold
portfolio <- 100000
# ================================
# Portfolio sizing
risk_fraction <- 0.1  # 10% of portfolio used per trade
position_size <- portfolio * risk_fraction
# Function to prepare data
prepare_data <- function(file_path) {
read.csv(file_path, stringsAsFactors = FALSE) %>%
mutate(
Date = as.Date(Date),
across(c(Open, High, Low, Close), ~ suppressWarnings(as.numeric(.)))
) %>%
filter(!is.na(Date), !is.na(Close))
}
# Load and prepare datasets
BTC_data <- prepare_data("BTC.csv")
SFTB_data  <- prepare_data("SFTB.csv")
# Merge into one data frame and initialize columns
aligned <- aligned %>%
mutate(
capital = portfolio + lag(cumPnL_roll, default = 0),  # this needs cumPnL_roll to exist
dynamic_position_size = capital * risk_fraction,
pnl_roll = ifelse(row_number() > 1,
dynamic_position_size * position_roll * (resid_roll - lag(resid_roll)),
0),
pnl_roll = ifelse(is.na(pnl_roll), 0, pnl_roll)
)
# Now calculate cumulative PnL *after* pnl_roll exists
aligned <- aligned %>%
mutate(
cumPnL_roll = cumsum(pnl_roll)
)
n <- nrow(aligned)
# 90-day rolling estimation and next-day signal
for (i in (window_size+1):(n-1)) {
calib <- aligned[(i-window_size):(i-1), ]
# 1) Fit hedge line on calibration window
mod <- lm(Close_SFTB ~ Close_BTC, data = calib)
a   <- coef(mod)[1]
b   <- coef(mod)[2]
aligned$alpha_roll[i] <- a
aligned$beta_roll[i]  <- b
# 2) Compute calibration residual stats
resid_calib <- calib$Close_SFTB - (a + b * calib$Close_BTC)
mu <- mean(resid_calib)
s  <- sd(resid_calib)
aligned$mu_roll[i]        <- mu
aligned$sd_roll[i]        <- s
aligned$threshold_roll[i] <- z_thresh * s
# 3) Today's residual & z-score
today_resid          <- aligned$Close_SFTB[i] - (a + b * aligned$Close_BTC[i])
aligned$resid_roll[i] <- today_resid
aligned$z_roll[i]     <- (today_resid - mu) / s
# 4) Generate today's signal (enter next day)
sig <- ifelse(aligned$z_roll[i] < -z_thresh,  1,
ifelse(aligned$z_roll[i] >  z_thresh, -1, 0))
aligned$signal_roll[i]     <- sig
aligned$position_roll[i+1] <- sig
}
# Compute PnL and cumulative PnL with corrected sign
aligned <- aligned %>%
mutate(
pnl_roll    = ifelse(row_number() > 1,
position_roll * (resid_roll - lag(resid_roll)),
0),
pnl_roll    = ifelse(is.na(pnl_roll), 0, pnl_roll),
cumPnL_roll = cumsum(pnl_roll)
) %>%
# Define entry/exit based on position changes
mutate(
prev_pos   = lag(position_roll, default = 0),
entry_roll = prev_pos == 0 & position_roll != 0,
exit_roll  = prev_pos != 0 & position_roll == 0
)
# 1) ADF test on rolling residuals
adf_roll <- adf.test(na.omit(aligned$resid_roll[(window_size+1):n]))
print(adf_roll)
# 2) One-sample t-test on rolling PnL (drop initial zeros)
pnl_test <- aligned$pnl_roll[(window_size+2):n]
tt_roll  <- t.test(pnl_test, mu = 0, alternative = "greater")
print(tt_roll)
# 3) Plot cumulative PnL
ggplot(aligned, aes(Date, cumPnL_roll)) +
geom_line(color = "darkorange", size = 1) +
labs(
title    = sprintf("Cumulative PnL: %d-Day Rolling Z-Score Strategy", window_size),
subtitle = sprintf("Threshold = ±%.2f σ", z_thresh),
x        = "Date",
y        = "Cumulative PnL (USD)"
) +
theme_minimal()
# 4) Plot SFTB vs. rolling hedge line with entry/exit markers
aligned <- aligned %>%
mutate(hedgeLine_roll = alpha_roll + beta_roll * Close_BTC)
ggplot(aligned, aes(x = Date)) +
geom_line(aes(y = Close_SFTB),      color = "blue",  size = 1) +
geom_line(aes(y = hedgeLine_roll), color = "red",   linetype = "dashed", size = 1) +
geom_point(
data = filter(aligned, entry_roll),
aes(x = Date, y = Close_SFTB),
shape = 24, color = "darkgreen", fill = "green", size = 2
) +  # ▲ entries
geom_point(
data = filter(aligned, exit_roll),
aes(x = Date, y = Close_SFTB),
shape = 25, color = "darkred",   fill = "red",   size = 2
) +  # ▼ exits
labs(
title    = sprintf("SFTB vs %d-Day Rolling Hedge Line", window_size),
subtitle = sprintf("Entries = ▲ green, Exits = ▼ red (Threshold ±%.2fσ)", z_thresh),
x        = "Date",
y        = "Price (USD)"
) +
theme_minimal()
# 5) Plot rolling residual spread with dynamic thresholds & entries/exits
ggplot(aligned, aes(Date, resid_roll)) +
geom_line(color = "steelblue") +
geom_line(aes(y =  threshold_roll), linetype = "dashed", color = "grey50") +
geom_line(aes(y = -threshold_roll), linetype = "dashed", color = "grey50") +
geom_point(
data = filter(aligned, entry_roll),
aes(Date, resid_roll),
shape = 24, color = "darkgreen", fill = "green", size = 2
) +
geom_point(
data = filter(aligned, exit_roll),
aes(Date, resid_roll),
shape = 25, color = "darkred",   fill = "red",   size = 2
) +
labs(
title = sprintf("%d-Day Rolling Residual Spread\n(Entries = ▲ green, Exits = ▼ red)", window_size),
x     = "Date",
y     = "Residual Spread (USD)"
) +
theme_minimal()
# At the end, report your profit and % return
final_profit <- tail(aligned$cumPnL_roll, 1)
return_pct   <- final_profit / portfolio * 100
message(sprintf("Total Profit = $%.2f", final_profit))
message(sprintf("Portfolio Return = %.2f%%", return_pct))
# Remove any NA or first-zero rows from PnL
valid_pnl <- aligned$pnl_roll[aligned$pnl_roll != 0]
# 1. Mean daily PnL
mean_pnl <- mean(valid_pnl)
# 2. Daily standard deviation
sd_pnl <- sd(valid_pnl)
# 3. Daily Sharpe ratio (risk-free rate assumed = 0)
sharpe_daily <- mean_pnl / sd_pnl
# Optional: annualized Sharpe ratio (assuming 252 trading days)
sharpe_annual <- sharpe_daily * sqrt(252)
# Print results
message(sprintf("Mean Daily PnL     = $%.2f", mean_pnl))
message(sprintf("Daily SD of PnL    = $%.2f", sd_pnl))
message(sprintf("Daily Sharpe Ratio = %.4f", sharpe_daily))
message(sprintf("Annualized Sharpe  = %.4f", sharpe_annual))
